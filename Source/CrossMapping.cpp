#include "stdafx.h"
unordered_map< uint64_t , uint64_t > nativeHashMap;

uint64_t __HASHMAPDATA[] = {
	0x07C837F9A01C34C9, 0x8E0F19C19C409DDB, // HUD::SET_TEXT_SCALE
0xBE6B23FFA53FB442, 0x7DCBD85F58FA8F39, // HUD::SET_TEXT_COLOUR
0x3A618A217E5154F0, 0x6276EB2A4CC7B039, // GRAPHICS::DRAW_RECT
0x25FBB336DF1804CB, 0x6EF0D5178A3B92EF, // HUD::BEGIN_TEXT_COMMAND_DISPLAY_TEXT
0x03B504CF259931BC, 0x6A8B3CC08A759F44, // HUD::ADD_TEXT_COMPONENT_INTEGER
0xCD015E5BB0D96A57, 0xBD217E52410D1B67, // HUD::END_TEXT_COMMAND_DISPLAY_TEXT
0x2C83A9DA6BFFC4F9, 0x222F76006659B0EB, // SCRIPT::_GET_NUMBER_OF_INSTANCES_OF_SCRIPT_WITH_NAME_HASH
0xE7FFAE5EBF23D890, 0x53017FFA0ED0CAF8, // GRAPHICS::DRAW_SPRITE
0x4F8644AF03D0E0D6, 0x7C7787D2D7139A85, // PLAYER::PLAYER_ID
0x67C540AA08E4A6F5, 0x9964F5BBD9415AB7, // AUDIO::PLAY_SOUND_FRONTEND
0xFE99B66D079CF6BC, 0x572062A62138FBA2, // PAD::DISABLE_CONTROL_ACTION
0x6806C51AD12B83B8, 0x0AF55029F939BA65, // HUD::HIDE_HUD_COMPONENT_THIS_FRAME
0xDE2EF5DA284CC8DF, 0x8339CBB35CFDBEA9, // CAM::_DISABLE_FIRST_PERSON_CAM_THIS_FRAME
0xADFF1B2A555F5FBA, 0xD4C6CE6EDC1E660A, // CAM::_DISABLE_VEHICLE_FIRST_PERSON_CAM_THIS_FRAME
0x5AE99C571D5BBE5D, 0x990C4E4B3665A4D6, // SCRIPT::TRIGGER_SCRIPT_EVENT
0x48AF36444B965238, 0xE434AB6E3DE89861, // MISC::IS_PC_VERSION
0x41BD2A6B006AF756, 0x0C98179F08C6DA4F, // PLAYER::INT_TO_PLAYERINDEX
0xB8DFD30D6973E135, 0xD56C8C2B75BF9665, // NETWORK::NETWORK_IS_PLAYER_ACTIVE
0xA921AA820C25702F, 0xA2BC31158C8CEFD2, // MISC::IS_BIT_SET
0xE80492A9AC099A93, 0x3B76114EC84D5812, // MISC:::CLEAR_BIT
0x43A66C31C68491C0, 0x23625FE58BACEBFD, // PLAYER::GET_PLAYER_PED
0x66B57B72E0836A76, 0xFC42FD48CE7A6EA5, // PED::SET_PED_CAN_BE_TARGETTED_BY_PLAYER
0x997ABD671D25CA0B, 0x5294582CE404D3F4, // PED::IS_PED_IN_ANY_VEHICLE
0x9A9112A0FE9A4713, 0x4D57D3E5ECE15A41, // PED::GET_VEHICLE_PED_IS_IN
0x7239B21A38F536BA, 0xD4B321D9096B01FC, // ENTITY::DOES_ENTITY_EXIST
0x9507D4271988E1AE, 0x45C52481C47B5E75, // NETSHOP::_NETWORK_SHOP_SET_TELEMETRY_NONCE_SEED
0x289016EC778D60E0, 0x811F592AB2038668, // NETCASH::NETWORK_SPENT_CASH_DROP
0x673966A0C0FD7171, 0x6645847093E58917, // OBJECT::CREATE_AMBIENT_PICKUP
0x4F14F9F870D6FBC8, 0xE9FEBBC43DAFBBAC, // DECORATOR::DECOR_IS_REGISTERED_AS_TYPE
0x05661B80A8C9165F, 0x145DAE1A4D0EA05D, // DECORATOR::DECOR_EXIST_ON
0x0CE3AA5E1CA19E10, 0x6950A3804E46BC89, // DECORATOR::DECOR_SET_INT
0x50FAC3A3E030A6E1, 0x073CCB5DC4DE69A5, // PLAYER::GET_PLAYER_PED_SCRIPT_INDEX
0x11FE353CF9733E6F, 0xFDE107F49C411FAD, // GRAPHICS::REQUEST_SCALEFORM_MOVIE
0x77FE3402004CD1B0, 0x393961962D5C2850, // GRAPHICS::_0x77FE3402004CD1B0
0xF6E48914C7A8694E, 0xF1BC72CEC2746995, // GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION
0xC3D0841A0CC546A6, 0xD02F24F3E2DB263A, // GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT
0xD69736AAE04DB51A, 0xD435957F6275B434, // GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_FLOAT
0xC58424BA936EB458, 0x282C78036676E0C2, // GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_BOOL
0xBA7148484BD90365, 0xE2603C088682FC07, // GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_STRING
0x362E2D3FE93A9959, 0x81019766FF500CCA, // GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING
0x61BB1D9B3A95D802, 0xF314976CA3E17AC7, // GRAPHICS::_SET_2D_LAYER
0xC6372ECD45D73BCD, 0x42713436F16E83BB, // GRAPHICS::_0xC6372ECD45D73BCD
0x0DF606929C105BE1, 0x53F520B89860756C, // GRAPHICS::DRAW_SCALEFORM_MOVIE_FULLSCREEN
0x54972ADAF0294A93, 0x1C65AC18AFC2CA39, // GRAPHICS::DRAW_SCALEFORM_MOVIE
0x1CE592FDC749D6F5, 0xC41C39F4E9AC1B22, // GRAPHICS::_DRAW_SCALEFORM_MOVIE_3D_NON_ADDITIVE
0xC6796A8FFA375E53, 0xAC7C2DE2DDC7AF03, // GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID
0xA2C6FC031D46FFF0, 0x675EE3FED67AA436, // NETWORK::GET_TIME_DIFFERENCE
0xF0D31AD191A74F87, 0x25A1A0BF87F74E56, // MISC::ABSI
0xCA042B6957743895, 0x9591DE0F00127F2A, // MISC::IS_STRING_NULL_OR_EMPTY
0x7A5487FE9FAA6B48, 0x169A8AC9F93C2727, // NETWORK::GET_NETWORK_TIME
0x2206BF9A37B7F724, 0x3E5A3FD805488EB9, // GRAPHICS::_START_SCREEN_EFFECT
0xA7A932170592B50E, 0xD2652A8A890B29BA, // CAM::DOES_CAM_EXIST
0xC3981DCE61D9E13F, 0x87B0FFB353287F00, // CAM::CREATE_CAM
0xB51194800B257161, 0x585CBFD90CDD9817, // CAM::CREATE_CAM_WITH_PARAMS
0xB13C14F66A00D047, 0x494374BCB9580EA5, // CAM::SET_CAM_FOV
0x026FB97D0A425F84, 0x0472F75F711AABCE, // CAM::SET_CAM_ACTIVE
0x07E5B515DB0636FC, 0x0298C8010FD5A69E, // CAM::RENDER_SCRIPT_CAMS
0xBFD8727AEA3CCEBA, 0x88C9848645E010B6, // CAM::SET_CAM_PARAMS
0xFC18DB55AE19E046, 0x55EE612A171C4D15, // NETWORK::_0xFC18DB55AE19E046
0xDFA2EF8E04127DD5, 0x4F7B74CE562E3EC6, // GRAPHICS::REQUEST_STREAMED_TEXTURE_DICT
0x0145F696AAAAD2E4, 0xF409FD92D37CDEEE, // GRAPHICS::HAS_STREAMED_TEXTURE_DICT_LOADED
0x0134F0835AB6BFCB, 0xCAD49063D4833510, // GRAPHICS::CREATE_CHECKPOINT
0x5B4E4C817FCC2DFB, 0x765F48D6E8886201, // CAM::_GET_GAMEPLAY_CAM_ROT
0xFBD96D87AC96D533, 0xD73A5380C8E6ABE4, // GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD
0xB8A850F20A067EB6, 0xE0EE6551C6D522E7, // GRAPHICS::_SCREEN_DRAW_POSITION_BEGIN
0xF5A2C681787E579D, 0x8CB8831CA90181C0, // GRAPHICS::_SCREEN_DRAW_POSITION_RATIO
0xE3A3DB414A373DAB, 0x01C11ACADC5D0A74, // GRAPHICS::_SCREEN_DRAW_POSITION_END
0x80338406F3475E55, 0x759AC38FBC6CCA9E, // GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING
0x6C188BE134E074AA, 0xA89C789CC9FEF523, // HUD::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME
0xE83A3E3557A56640, 0x7151302E2AA285DC, // GRAPHICS::_0xE83A3E3557A56640
0x0499D7B09FC9B407, 0x357127A2E350E9F6, // PAD::GET_CONTROL_INSTRUCTIONAL_BUTTON
0x873C9F3104101DD3, 0x419479F67BC2C70F, // GRAPHICS::_GET_ACTIVE_SCREEN_RESOLUTION
0xDB88A37483346780, 0x89A357DF53D3A79F, // HUD::_GET_TEXT_SCALE_HEIGHT
0x6B3C4650BC8BEE47, 0xD768139F27F2CEFE, // HUD::SET_TEXT_RIGHT_JUSTIFY
0xC02F4DBFB51D988B, 0xA0147851A8831777, // HUD::SET_TEXT_CENTRE
0x63145D9C883A1A70, 0xF3AAD5EF5E952D4E, // HUD::SET_TEXT_WRAP
0xCD015E5BB0D96A57, 0xBD217E52410D1B67, // HUD::END_TEXT_COMMAND_DISPLAY_TEXT
0x25FBB336DF1804CB, 0x6EF0D5178A3B92EF, // HUD::BEGIN_TEXT_COMMAND_DISPLAY_TEXT
0x2513DFB0FB8400FE, 0xAC03658F8280C4A9, // HUD::SET_TEXT_OUTLINE
0x1CA3E9EAC9D93E5E, 0x7E7124B777E9CC62, // HUD::SET_TEXT_DROP_SHADOW
0x66E0276CC5F6B9DA, 0xDBA848DABDEF9021, // HUD::SET_TEXT_FONT
0x07C837F9A01C34C9, 0x8E0F19C19C409DDB, // HUD::SET_TEXT_SCALE
0xBE6B23FFA53FB442, 0x7DCBD85F58FA8F39, // HUD::SET_TEXT_COLOUR
0x9DE624D2FC4B603F, 0x481ABE064CB1738E, // NETWORK::NETWORK_IS_SESSION_STARTED
0x202709F4C58A0424, 0x6C607B5286DEE8D9, // HUD::_SET_NOTIFICATION_TEXT_ENTRY
0x531B84E7DA981FB6, 0xA584404B90034B31, // HUD::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2
0x2ED7843F8F801023, 0x6E617E0C74B3189D, // HUD::_DRAW_NOTIFICATION
0xD80958FC74E988A6, 0x0FA8183DAD2B3203, // PLAYER::PLAYER_PED_ID
0x388EB2B86C73B6B3, 0x229B5E28267D1B1F, // NETWORK::NETWORK_HANDLE_FROM_PLAYER
0x6F79B93B0A8E4133, 0x5D17AB84230A234B, // NETWORK::NETWORK_IS_HANDLE_VALID
0x1A24A179F9B31654, 0xB8A6A83E8C303720, // NETWORK::NETWORK_IS_FRIEND
0x5A47B3B5E63E94C6, 0xEC92BD9C1205459E, // ENTITY::GET_ENTITY_ALPHA
0xDB4EACD4AD0A5D6B, 0x5C3CC258CDC18660, // PED::GET_PEDHEADSHOT_TXD_STRING
0x1D6A14F1F9A736FC, 0x9CF697857C1FAEF2, // NETWORK::NETWORK_GET_HOST_OF_SCRIPT
0x6D0DE6A7B5DA71F8, 0xA09A99AC02B24954, // PLAYER::GET_PLAYER_NAME
0x01BF60A500E28887, 0x77FF1FAF6F41CA71, // NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY
0x595F028698072DD9, 0x690CD141AD7C9F01, // NETWORK::_0x595F028698072DD9
0xB69317BF5E782347, 0x7252D7992DA58CA9, // NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY
0xA11700682F3AD45C, 0x81A2C9EAB3210AD0, // NETWORK::NETWORK_GET_NETWORK_ID_FROM_ENTITY
0x299EEB23175895FC, 0x5CD902263A2E9D7F, // NETWORK::SET_NETWORK_ID_CAN_MIGRATE
0x4D36070FE0215186, 0xF42AC9E0924DC59B, // NETWORK::NETWORK_HAS_CONTROL_OF_NETWORK_ID
0xA670B3662FAFFBD0, 0x4DB32D0662E0696B, // NETWORK::NETWORK_REQUEST_CONTROL_OF_NETWORK_ID
0x93DC1BE4E1ABE9D1, 0x3BC43142B379DA15, // NETWORK::NETWORK_IS_PLAYER_CONNECTED
0xC82630132081BB6F, 0xA83A44AC764B1709, // NETWORK::NETWORK_MEMBER_ID_FROM_GAMER_HANDLE
0xEEF059FAD016D209, 0x35D31BEBAFD53DE6, // ENTITY::GET_ENTITY_HEALTH
0x15D757606D170C3C, 0xA42DC7DBEADF7FC2, // ENTITY::GET_ENTITY_MAX_HEALTH
0x9483AF821605B1D8, 0xCEF1BE9754DAD684, // PED::GET_PED_ARMOUR
0x92659B4CE1863CB3, 0x1B9F7BE0175FCA1A, // PLAYER::GET_PLAYER_MAX_ARMOUR
0x3317DEDB88C95038, 0xFBEFCFA19C9FF74E, // PED::IS_PED_DEAD_OR_DYING
0x9F47B058362C84B5, 0x7F375072508F738F, // ENTITY::GET_ENTITY_MODEL
0x7B5280EBA9840C72, 0xD54FB72F71EFE6C4, // HUD::_GET_LABEL_TEXT
0xB215AAC32D25D019, 0x37AE6E37399BFD47, // VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL
0xD5037BA82E12416F, 0xB8D4A2BAA78AB950, // ENTITY::GET_ENTITY_SPEED
0xE28E54788CE8F12D, 0xEBE4F888D9965006, // PLAYER::GET_PLAYER_WANTED_LEVEL
0x3A87E44BB9A01D54, 0x63EA4FAF7CDEFEC7, // WEAPON::GET_CURRENT_PED_WEAPON
0x3FEF770D40960D5A, 0xACE5E491FC1B0D37, // ENTITY::GET_ENTITY_COORDS
0xCD90657D4C30E1CA, 0xBB148FDFDB97778E, // ZONE::GET_NAME_OF_ZONE
0x2EB41072B4C1E4C0, 0x93C1A0E18C4418AE, // PATHFIND::GET_STREET_NAME_AT_COORD
0xD0EF8A959B8A4CB9, 0x3D250FEC24E6BB71, // HUD::GET_STREET_NAME_FROM_HASH_KEY
};
/*
void CrossMapping::initNativeMap() {
	static int init = 0;
	struct twoQwords {
		uint64_t first;
		uint64_t second;
	} *p2q;

	if (init) {
		DEBUGMSG("Already init, nativeHashMap has %lli members", nativeHashMap.size());
		return;
	}

	p2q = reinterpret_cast<twoQwords *>(__HASHMAPDATA);
	//DEBUG_OUT("p2q: %p", p2q);
	//DEBUG_OUT("p2q->first: %llx", p2q->first);
	//DEBUG_OUT("p2q->second: %llx", p2q->second);
	while (p2q->first) {
		//DEBUG_OUT("initNHM: %llx, %llx", p2q->first, p2q->second);
		nativeHashMap.emplace(p2q->first, p2q->second);
		//DEBUG_OUT("nativeHashMap now has %lli members", nativeHashMap.size());
		++p2q;
	}
	init = 1;
	DEBUGMSG("nativeHashMap has %lli members", nativeHashMap.size());


	std::ofstream file;
	file.open("EntryPoints.txt");
	for (int i = 0; i < sizeof(__HASHMAPDATA) / sizeof(*__HASHMAPDATA); i += 2) {
		auto addr = Hooking::GetNativeHandler(__HASHMAPDATA[i]);
		file << std::hex << "0x" << __HASHMAPDATA[i] << " : " << "0x" << addr << std::endl;
	}
	file.close();
}*/

void CrossMapping::initNativeMap( )
{
    static int init = 0;
    struct twoQwords
    {
        uint64_t first;
        uint64_t second;
    } * p2q;

    if ( init )
    {
        //DEBUGMSG("Already init, nativeHashMap has %lli members", nativeHashMap.size());
        return;
    }

    p2q = reinterpret_cast< twoQwords * >( __HASHMAPDATA );
    //DEBUG_OUT("p2q: %p", p2q);
    //DEBUG_OUT("p2q->first: %llx", p2q->first);
    //DEBUG_OUT("p2q->second: %llx", p2q->second);

    //loops through all items in the hash array, inserts into hash map if unique
    while ( p2q -> first )
    {
        //DEBUG_OUT("initNHM: %llx, %llx", p2q->first, p2q->second);
        nativeHashMap . emplace( p2q -> first , p2q -> second );
        //DEBUG_OUT("nativeHashMap now has %lli members", nativeHashMap.size());
        ++p2q;
    }
    init = 1;
    //DEBUGMSG("nativeHashMap has %lli members", nativeHashMap.size());
}
/*##################################################################################################*/

static nMap nativeCache;

bool CrossMapping::searchMap( nMap map, uint64_t inNative, uint64_t * outNative )
{
    auto found = false;
    //LOG_DEBUG("inNative 0x%016llx", inNative);
    for ( nMap::const_iterator it = map . begin( ) ; it != map . end( ) ; ++it )
    {
        found = ( inNative == it -> first );
        if ( found )
        {
            *outNative = it -> second;
            //LOG_DEBUG("outNative 0x%016llx", outNative);
            break;
        }
    }

    return found;
}

uint64_t CrossMapping::MapNative( uint64_t inNative )
{
    uint64_t outNative;
    auto found = false;

    const auto currentNative = inNative;
    found = searchMap( nativeCache , currentNative , &outNative );
    if ( found ) return outNative;
    found = searchMap( nativeHashMap , currentNative , &outNative );
    if ( found )
    {
        nativeCache[inNative] = outNative;
        return outNative;
    }

    // Fail safe to prevent LOG_ERROR spam due to ontick run failed natives
    found = std::find( nativeFailedVec . begin( ) , nativeFailedVec . end( ) , inNative ) != nativeFailedVec . end( );
    if ( found )
    {
        return NULL;
    }
    nativeFailedVec . push_back( inNative );
    //CLog::error("Failed to find new hash for 0x%p", inNative);
    return NULL;
}

void CrossMapping::dumpNativeMappingCache( )
{
    // read the mapping table
    /*FILE *file;
    int file_exists;
    char filename[0x400];
    snprintf(filename, sizeof(filename), "native_cache.log");
    //first check if the file exists...
    fopen_s(&file, filename, "r");
    if (file == NULL) file_exists = 0;
    else { file_exists = 1; fclose(file); }

    //...then open it in the appropriate way
    if (file_exists == 1)
    {
    fopen_s(&file, filename, "r+b");
    }
    else
    {
    fopen_s(&file, filename, "w+b");
    }

    if (file != NULL)
    {
    char buffer[50];
    for (nMap::const_iterator it = nativeCache.begin(); it != nativeCache.end(); ++it)
    {
    sprintf_s(buffer, "{ 0x%llx, 0x%llx },\n", it->first, it->second);
    fputs(buffer, file);
    }

    PlaySound(L"C:\\WINDOWS\\Media\\tada.wav", NULL, SND_ASYNC);

    fclose(file);
    }*/
}
